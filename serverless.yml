service: ${env:SERVICE}

provider:
  runtime: nodejs14.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: ${env:REGION}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - lambda:InvokeFunction
        - lamnda:InvokeAsync
      
plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-offline

resources:
  Resources:
    EmployeesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: {env:TABLE_EMPLOYEES}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

functions:
  createEmployee:
    handler: src/controllers/base.postEmployee
    events:
      - http:
          path: /employees
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(.serverless-configurations/schemas/create-employee.json)}

  updateEmployee:
    handler: src/controllers/base.putEmployee
    events:
      - http:
          path: /employees
          method: put
          cors: true
          request:
            schema:
              application/json: ${file(.serverless-configurations/schemas/update-employee.json)}

  deleteEmployee:
    handler: src/controllers/base.deleteEmployee
    events:
      - http:
          path: /employees/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true

  getEmployee:
    handler: src/controllers/base.getEmployee
    events:
      - http:
          path: /employees/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
